{"version":3,"sources":["components/Input.js","components/Search.js","components/GeneratedSwatch.js","components/AddedSwatch.js","components/Results.js","components/SubmittedSwatch.js","components/ColorWall.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Input","name","placeholder","value","handleChange","htmlFor","className","type","id","onChange","Search","getColors","onSubmit","e","GeneratedSwatch","props","state","textToCopy","this","hexCode","colorName","addColor","removeColor","customPalette","selectedStatus","includes","onClick","style","background","Component","AddedSwatch","Results","resetSearch","enteredImageURL","generatedPalette","swatchError","savePalette","paletteName","isTablet","isSmallTablet","isPhone","resetError","src","alt","map","paletteColor","key","uuidv4","color","label","swatch","SubmittedSwatch","clickToCopy","setState","text","ColorWall","submissions","submission","paletteColors","image","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","calculateScreenIfTablet","window","innerWidth","calculateScreenIfSmallTablet","calculateScreenIfPhone","preventDefault","alert","apiDataLoading","axios","url","dataResponse","paramsSerializer","params","Qs","stringify","arrayFormat","reqUrl","palette","sort","proxyHeaders","xmlToJSON","then","res","console","log","showSearch","data","tags","catch","error","finally","target","length","prevState","filter","item","newPalette","database","ref","push","addEventListener","on","response","storedSubmissions","val","removeEventListener","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.224fc5b1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Input = ({ name, placeholder, value, handleChange }) => {\n  return (\n    <div>\n      <label htmlFor={name} className=\"visuallyHidden\">\n        {placeholder}\n      </label>\n      <input\n        type=\"text\"\n        placeholder={placeholder}\n        id={name}\n        name={name}\n        value={value}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport Input from \"./Input\";\n\nconst Search = ({ getColors, value, handleChange }) => {\n  return (\n    <header className=\"search\">\n      <h2>Create your photo-inspired color palette!</h2>\n      <form onSubmit={e => getColors(e)}>\n        <Input\n          placeholder=\"enter image url\"\n          name=\"enteredImageURL\"\n          value={value}\n          handleChange={handleChange}\n        />\n        <button className=\"generate-palette\">generate palette!</button>\n      </form>\n    </header>\n  );\n};\n\nexport default Search;\n","import React, { Component } from \"react\";\n\nclass GeneratedSwatch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      textToCopy: \"\"\n    };\n  }\n\n  render() {\n    const {\n      hexCode,\n      colorName,\n      addColor = () => {},\n      removeColor = () => {},\n      customPalette\n    } = this.props;\n\n    const isSelected = `swatch swatch-generated selected-swatch`;\n    const notSelected = `swatch swatch-generated`;\n\n    const selectedStatus = customPalette.includes(hexCode)\n      ? isSelected\n      : notSelected;\n\n    return (\n      <li\n        className={selectedStatus}\n        onClick={() =>\n          customPalette.includes(hexCode)\n            ? removeColor(hexCode)\n            : addColor(hexCode)\n        }\n      >\n        <div className=\"color-blob\" style={{ background: hexCode }}></div>\n        <p className=\"color-name\">{colorName}</p>\n        <p className=\"hex-code\">{hexCode}</p>\n      </li>\n    );\n  }\n}\n\nexport default GeneratedSwatch;\n","import React from \"react\";\n\nconst AddedSwatch = ({ colorName, removeColor, hexCode }) => {\n  return (\n    <li\n      className=\"color-blob swatch swatch-added\"\n      onClick={() => {\n        removeColor(hexCode);\n      }}\n      style={{ background: hexCode }}\n    ></li>\n  );\n};\n\nexport default AddedSwatch;\n","import React from \"react\";\nimport uuidv4 from \"uuid\";\nimport Input from \"./Input\";\nimport GeneratedSwatch from \"./GeneratedSwatch\";\nimport AddedSwatch from \"./AddedSwatch\";\n\nconst Results = ({\n  resetSearch,\n  enteredImageURL,\n  generatedPalette,\n  addColor,\n  removeColor,\n  customPalette,\n  swatchError,\n  savePalette,\n  paletteName,\n  handleChange,\n  isTablet,\n  isSmallTablet,\n  isPhone,\n  resetError\n}) => {\n  return (\n    <section className=\"results\">\n      <div className=\"results-panel results-left\">\n        <div className=\"image-container\">\n          <img src={enteredImageURL} alt=\"\" />\n        </div>\n        <button className=\"reset-btn\" onClick={resetSearch}>\n          {isTablet || isSmallTablet || isPhone ? (\n            <span>&#8592;</span>\n          ) : (\n            \"reset image\"\n          )}\n        </button>\n      </div>\n      <div className=\"results-panel results-right\">\n        <p className=\"results-heading\">Add up to six colors</p>\n        <ul className=\"current-palette-container\">\n          {generatedPalette.map(paletteColor => {\n            return (\n              <GeneratedSwatch\n                key={uuidv4()}\n                hexCode={paletteColor.color}\n                colorName={paletteColor.label}\n                addColor={addColor}\n                removeColor={removeColor}\n                customPalette={customPalette}\n              />\n            );\n          })}\n        </ul>\n      </div>\n      <div className=\"results-panel results-bottom\">\n        <p className=\"results-heading your-palette\">Your palette</p>\n        {swatchError && resetError()}\n        <ul className=\"custom-palette\">\n          {customPalette.map(swatch => {\n            return (\n              <AddedSwatch\n                key={uuidv4()}\n                hexCode={swatch}\n                removeColor={removeColor}\n              />\n            );\n          })}\n        </ul>\n        <form onSubmit={e => savePalette(e)}>\n          <Input\n            placeholder={\n              isTablet || isPhone ? \"palette name\" : \"name your palette\"\n            }\n            name=\"paletteName\"\n            value={paletteName}\n            handleChange={handleChange}\n          />\n          <button className=\"save-palette\">\n            {isTablet || isPhone ? \"save palette!\" : \"save to The Color Wall!\"}\n          </button>\n        </form>\n      </div>\n    </section>\n  );\n};\n\nexport default Results;\n","import React, { Component } from \"react\";\nimport CopyText from \"react-copy-text\";\n\nclass SubmittedSwatch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      textToCopy: \"\"\n    };\n  }\n\n  clickToCopy = () => this.setState({ textToCopy: this.props.hexCode });\n\n  render() {\n    return (\n      <li\n        style={{ background: this.props.hexCode }}\n        className=\"color-blob swatch swatch-submitted\"\n        onClick={this.clickToCopy}\n      >\n        <CopyText text={this.state.textToCopy}></CopyText>\n      </li>\n    );\n  }\n}\n\nexport default SubmittedSwatch;\n","import React from \"react\";\nimport uuidv4 from \"uuid\";\nimport SubmittedSwatch from \"./SubmittedSwatch\";\n\nconst ColorWall = ({ submissions }) => {\n  return (\n    <section className=\"color-wall\">\n      <div className=\"wrapper\">\n        <h2>The ColorWall</h2>\n        <h3>our palette treasure trove</h3>\n        <ul className=\"submissions\">\n          {submissions.map(submission => {\n            return (\n              <li key={uuidv4()} className=\"submission\">\n                <ul className=\"submitted-swatches\">\n                  {submission.paletteColors.map(color => {\n                    return <SubmittedSwatch key={uuidv4()} hexCode={color} />;\n                  })}\n                </ul>\n                <p className=\"submission-name\">{submission.paletteName}</p>\n                <div className=\"image-container\">\n                  <img\n                    className=\"submission-image\"\n                    src={submission.image}\n                    alt=\"\"\n                  />\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </section>\n  );\n};\n\nexport default ColorWall;\n","import firebase from 'firebase';\n\n// Initialize Firebase\n// USE YOUR CONFIG OBJECT\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDU-GNRgG6ZSSOgcP2Da9A8HqvCwxRgMSU\",\n  authDomain: \"snapswatch-f84d0.firebaseapp.com\",\n  databaseURL: \"https://snapswatch-f84d0.firebaseio.com\",\n  projectId: \"snapswatch-f84d0\",\n  storageBucket: \"\",\n  messagingSenderId: \"654240180155\",\n  appId: \"1:654240180155:web:4c8f5662bdf59595dac69e\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React, { Component } from \"react\";\nimport Search from \"./components/Search\";\nimport Results from \"./components/Results\";\nimport ColorWall from \"./components/ColorWall\";\nimport \"./partials/App.scss\";\nimport Qs from \"qs\";\nimport axios from \"axios\";\nimport firebase from \"./firebase\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showSearch: true,\n      apiDataLoading: false,\n      enteredImageURL: \"\",\n      generatedPalette: [],\n      customPalette: [],\n      swatchError: false,\n      paletteName: \"\",\n      submissions: [],\n      isTablet: false,\n      isSmallTablet: false,\n      isPhone: false\n    };\n  }\n\n  componentDidMount() {\n    this.calculateScreenIfTablet();\n    this.calculateScreenIfSmallTablet();\n    this.calculateScreenIfPhone();\n    window.addEventListener(\"resize\", this.calculateScreenIfTablet);\n    window.addEventListener(\"resize\", this.calculateScreenIfSmallTablet);\n    window.addEventListener(\"resize\", this.calculateScreenIfPhone);\n\n    //Storing Firebase data in our state object\n\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", response => {\n      const storedSubmissions = [];\n      const data = response.val();\n\n      for (let key in data) {\n        storedSubmissions.push(data[key]);\n      }\n\n      this.setState({\n        submissions: storedSubmissions\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.calculateScreenIfTablet);\n    window.removeEventListener(\"resize\", this.calculateScreenIfSmallTablet);\n  }\n\n  calculateScreenIfTablet = () => {\n    this.setState({\n      isTablet: window.innerWidth < 780 && window.innerWidth >= 600\n    });\n  };\n\n  calculateScreenIfSmallTablet = () => {\n    this.setState({\n      isSmallTablet: window.innerWidth < 600\n    });\n  };\n\n  calculateScreenIfPhone = () => {\n    this.setState({\n      isPhone: window.innerWidth < 480\n    });\n  };\n\n  getColors = e => {\n    e.preventDefault();\n\n    if (!this.state.enteredImageURL) {\n      return alert(\"Please enter a URL\");\n    }\n\n    this.setState({\n      apiDataLoading: true\n    });\n\n    axios({\n      url: \"http://proxy.hackeryou.com\",\n      dataResponse: \"json\",\n      paramsSerializer: function(params) {\n        return Qs.stringify(params, { arrayFormat: \"brackets\" });\n      },\n      params: {\n        reqUrl: \"https://apicloud-colortag.p.rapidapi.com/tag-url.json\",\n        params: {\n          palette: \"w3c\",\n          sort: \"relevance\",\n          url: this.state.enteredImageURL\n        },\n        proxyHeaders: {\n          \"x-rapidapi-host\": \"apicloud-colortag.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"a036396446msh88226c6849e787cp11ea84jsn3481ae1e567d\"\n        },\n        xmlToJSON: false\n      }\n    })\n      .then(res => {\n        console.log(res);\n\n        this.setState({\n          showSearch: false,\n          generatedPalette: res.data.tags\n        });\n      })\n      .catch(error => {\n        alert(\"No results found. Please try again.\");\n      })\n      .finally(() => {\n        this.setState({\n          apiDataLoading: false\n        });\n      });\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  addColor = hexCode => {\n    if (this.state.customPalette.length === 6) {\n      this.setState({\n        swatchError: true\n      });\n    } else {\n      this.setState(prevState => ({\n        customPalette: [...prevState.customPalette, hexCode],\n        swatchError: false\n      }));\n    }\n  };\n\n  resetError = () => {\n    alert(\"no more!\");\n    this.setState({\n      swatchError: false\n    });\n  };\n\n  removeColor = hexCode => {\n    this.setState(prevState => ({\n      swatchError: false,\n      customPalette: prevState.customPalette.filter(item => {\n        return item !== hexCode;\n      })\n    }));\n  };\n\n  savePalette = e => {\n    e.preventDefault();\n\n    const { enteredImageURL, paletteName, customPalette } = this.state;\n\n    if (paletteName) {\n      return alert(\"please type in a name\");\n    }\n\n    if (customPalette.length < 3) {\n      return alert(\"please choose at least 3 colors \");\n    }\n\n    const dbRef = firebase.database().ref();\n\n    const newPalette = {\n      image: enteredImageURL,\n      paletteName: paletteName,\n      paletteColors: customPalette\n    };\n\n    dbRef.push(newPalette);\n    alert(\"palette has been saved\");\n  };\n\n  resetSearch = () => {\n    this.setState({\n      showSearch: true,\n      enteredImageURL: \"\",\n      generatedPalette: [],\n      customPalette: [],\n      paletteName: \"\"\n    });\n  };\n\n  render() {\n    const {\n      apiDataLoading,\n      showSearch,\n      enteredImageURL,\n      generatedPalette,\n      customPalette,\n      swatchError,\n      paletteName,\n      submissions,\n      isTablet,\n      isSmallTablet,\n      isPhone\n    } = this.state;\n\n    const {\n      getColors,\n      handleChange,\n      resetSearch,\n      addColor,\n      removeColor,\n      savePalette,\n      resetError\n    } = this;\n\n    return (\n      <div className={apiDataLoading ? \"App loading\" : \"App\"}>\n        <div className=\"palette-generator\">\n          <div className={showSearch ? \"wrapper\" : \"wrapper white-bg\"}>\n            <h1>\n              <a href=\"App.js\">SnapSwatch</a>\n            </h1>\n\n            {this.state.showSearch ? (\n              <Search\n                getColors={getColors}\n                value={enteredImageURL}\n                handleChange={handleChange}\n              />\n            ) : (\n              <Results\n                resetSearch={resetSearch}\n                enteredImageURL={enteredImageURL}\n                generatedPalette={generatedPalette}\n                addColor={addColor}\n                removeColor={removeColor}\n                customPalette={customPalette}\n                swatchError={swatchError}\n                savePalette={savePalette}\n                paletteName={paletteName}\n                handleChange={handleChange}\n                isTablet={isTablet}\n                isSmallTablet={isSmallTablet}\n                isPhone={isPhone}\n                resetError={resetError}\n              />\n            )}\n\n            <p className=\"side-text credits\">\n              designed and coded by jenelle law\n            </p>\n          </div>\n\n          {(showSearch || isPhone) && (\n            <p className=\"side-text colorwall-directions\">\n              {isSmallTablet ? (\n                <span className=\"down-arrow\">&#8595;</span>\n              ) : (\n                <span>&#8592;</span>\n              )}\n              The ColorWall\n            </p>\n          )}\n        </div>\n        <ColorWall submissions={submissions} />;\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}